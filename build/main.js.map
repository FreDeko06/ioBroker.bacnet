{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\nimport * as utils from \"@iobroker/adapter-core\";\nimport Bacnet, {\n  ApplicationTag,\n  ObjectType,\n  PropertyIdentifier,\n} from \"@bacnet-js/client\";\n\ntype BACnetDevice = {\n  ip: string;\n  instance: number;\n  name: string;\n};\ntype BACnetObj = {\n  id: number;\n  type: number;\n  name: string;\n  desc: string;\n};\n\ntype Device = {\n  ip: string;\n  port: number;\n  name: string;\n  objects: BACnetObject[];\n};\n\ntype BACnetObject = {\n  objectId: number;\n  objectName: string;\n  description: string;\n  type: number;\n  subscribe: boolean;\n  binary?: boolean;\n  valueType?: ApplicationTag;\n};\ntype Property = {\n  id: number;\n  type: ioBroker.CommonType;\n  default: any;\n  valueType: ApplicationTag;\n};\n\nclass BacnetAdapter extends utils.Adapter {\n  private bacnet: Bacnet = new Bacnet();\n  private devices: Device[] = [];\n  private pollInterval?: ioBroker.Interval = null;\n\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\n    super({\n      ...options,\n      name: \"bacnet\",\n    });\n    this.on(\"ready\", this.onReady.bind(this));\n    this.on(\"stateChange\", this.onStateChange.bind(this));\n    // this.on('message', this.onMessage.bind(this));\n    this.on(\"unload\", this.onUnload.bind(this));\n  }\n\n  /**\n   * Is called when databases are connected and adapter received configuration.\n   */\n  private async onReady(): Promise<void> {\n    this.setState(\"info.connection\", false, true);\n\n    this.devices = [];\n\n    this.config.devices.forEach((dev: Device) => {\n      dev.name = dev.name.replace(this.FORBIDDEN_CHARS, \"_\");\n      if (\n        this.devices.some((d: Device) => d.name == dev.name || d.ip == dev.ip)\n      ) {\n        this.log.warn(\n          `Skipping device ${dev.name} with ${dev.objects.length} object(s). Name or ip address already exists.`,\n        );\n        return;\n      }\n      const objects: BACnetObject[] = [];\n      dev.objects.forEach((obj: BACnetObject) => {\n        obj.objectName = obj.objectName.replace(this.FORBIDDEN_CHARS, \"_\");\n        if (\n          objects.some(\n            (o: BACnetObject) =>\n              o.objectId == obj.objectId || o.objectName == obj.objectName,\n          )\n        ) {\n          this.log.warn(\n            `Skipping obj ${dev.name}/${obj.objectName}. Name or object id already exists.`,\n          );\n          return;\n        }\n        obj.binary =\n          obj.type == ObjectType.BINARY_INPUT ||\n          obj.type == ObjectType.BINARY_OUTPUT ||\n          obj.type == ObjectType.BINARY_VALUE;\n        objects.push(obj);\n      });\n      dev.objects = objects;\n      this.devices.push(dev);\n    });\n\n    await this.updateStates();\n    this.subscribeStates(`dev.*`);\n\n    this.log.debug(`binding to local port ${this.config.port}`);\n    const client = new Bacnet({\n      port: this.config.port,\n      interface: this.config.ip,\n    });\n\n    this.bacnet = client;\n\n    if (this.config.pollInterval < 0 || isNaN(this.config.pollInterval)) {\n      this.log.warn(\n        \"poll interval cannot be smaller than 0! Using default: 10s\",\n      );\n      this.config.pollInterval = 10;\n    }\n\n    this.pollInterval = this.setInterval(() => {\n      this.log.debug(\"POLLING VALUES...\");\n      this.pollValues();\n    }, this.config.pollInterval * 1000);\n    this.pollValues();\n\n    this.bacnet.on(\"covNotifyUnconfirmed\", (data: any) => {\n      this.handleCOV(data);\n    });\n\n    // subscribe\n    this.devices.forEach((dev: Device) => {\n      let id = 80;\n      dev.objects.forEach((obj: BACnetObject) => {\n        if (!obj.subscribe) return;\n        this.log.debug(`subscribing to ${dev.name}/${obj.objectName}`);\n        this.bacnet\n          .subscribeCov(\n            { address: dev.ip },\n            { type: obj.type, instance: obj.objectId },\n            id++,\n            false,\n            false,\n            0,\n          )\n          .catch((e) => {\n            this.log.error(\n              `Failed to subscribe to ${dev.name}/${obj.objectName}: ${e}`,\n            );\n          });\n      });\n    });\n  }\n\n  private handleCOV(data: any): void {\n    try {\n      const dev: Device = this.devices.find(\n        (dev: Device) => data.header.sender.address == dev.ip,\n      )!;\n      if (dev == undefined) {\n        this.log.warn(\n          `Received COV for not configured device (ip: ${data.header.sender.address})`,\n        );\n        return;\n      }\n      const obj: BACnetObject = dev.objects.find(\n        (obj: BACnetObject) =>\n          obj.objectId == data.payload.monitoredObjectId.instance,\n      )!;\n      if (obj == undefined) {\n        this.log.warn(\n          `Received COV for not configured object (id: ${data.payload.monitoredObjectId.instance})`,\n        );\n        return;\n      }\n\n      data.payload.values.forEach((val: any) => {\n        let prop = \"\";\n        for (const p in this.PROPERTIES) {\n          if (this.PROPERTIES[p].id == val.property.id) {\n            prop = p;\n            break;\n          }\n        }\n        if (prop == \"\") {\n          return;\n        }\n        this.setBACnetState(\n          dev,\n          obj,\n          prop,\n          this.handleValue(val.value[0].type, val.value[0].value),\n        );\n      });\n      if (obj == undefined) {\n        this.log.warn(\n          `No state found for cov (${JSON.stringify(data.payload.monitoredObjectId)}`,\n        );\n      }\n    } catch (e) {\n      this.log.error(`Failed to parse COV: ${e}`);\n    }\n  }\n\n  private pollValues(): void {\n    const promises: Promise<void>[] = [];\n    this.devices.forEach((dev: Device) => {\n      dev.objects.forEach((obj: BACnetObject) => {\n        for (const prop in this.PROPERTIES) {\n          promises.push(this.pollProperty(dev, obj, prop));\n        }\n      });\n    });\n    Promise.all(promises)\n      .catch(() => {\n        this.setState(\"info.connection\", false, true);\n      })\n      .then(() => {\n        this.setState(\"info.connection\", true, true);\n      });\n  }\n\n  private async pollProperty(\n    dev: Device,\n    obj: BACnetObject,\n    prop: string,\n  ): Promise<void> {\n    return await new Promise<void>((resolve, reject) => {\n      this.bacnet\n        .readProperty(\n          { address: dev.ip },\n          { type: obj.type, instance: obj.objectId },\n          this.PROPERTIES[prop].id,\n        )\n        .then((value) => {\n          this.log.debug(`received ${JSON.stringify(value)} for ${prop}`);\n          if (prop == \"present_value\") obj.valueType = value.values[0].type;\n          const v = this.handleValue(\n            value.values[0].type,\n            value.values[0].value,\n          );\n          this.setBACnetState(dev, obj, prop, v);\n          resolve();\n        })\n        .catch((err) => {\n          this.log.error(`Failed to poll: ${dev.name}/${obj.objectId}: ${err}`);\n          reject(err);\n        });\n    });\n  }\n\n  private handleValue(dataType: number, value: any): any {\n    switch (dataType) {\n      case 0:\n        return 0;\n      case 1:\n        return value == 1;\n      case 2:\n        return value >>> 0;\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 9:\n      case 10:\n      case 11:\n        return value;\n      case 8:\n        return value.value[0];\n\n      default:\n        this.log.warn(`Unknown data-type: ${dataType}`);\n        return JSON.stringify(value);\n    }\n  }\n\n  private setBACnetState(\n    dev: Device,\n    obj: BACnetObject,\n    prop: string,\n    value: any,\n  ): void {\n    const id = `dev.${dev.name}.${obj.objectName}.${prop}`;\n    this.log.debug(`setting ${JSON.stringify(value)} to ${id}..`);\n    this.setState(\n      id,\n      prop == \"present_value\" && obj.binary ? value == 1 : value,\n      true,\n    ).catch((e) => {\n      this.log.error(e);\n    });\n  }\n\n  private async updateStates(): Promise<void> {\n    await this.deleteUnusedStates();\n    await this.createStates();\n  }\n\n  private async deleteUnusedStates(): Promise<void> {\n    const objects = await this.getAdapterObjectsAsync();\n    for (const s in objects) {\n      if (!s.startsWith(`${this.name}.${this.instance}.dev`)) continue;\n\n      if (objects[s].type == \"channel\" && this.isBACnetObjectFromId(s)) {\n        await this.delObjectAsync(s, { recursive: true });\n      }\n      if (\n        objects[s].type == \"device\" &&\n        this.devices.find((dev: Device) => dev.name == s) == undefined\n      ) {\n        await this.delObjectAsync(s, { recursive: true });\n      }\n    }\n  }\n\n  private isBACnetObjectFromId(id: string): boolean {\n    return this.devices.some((dev: Device) =>\n      dev.objects.some((obj) => id == `dev.${dev.name}.${obj.objectName}`),\n    );\n  }\n\n  private PROPERTIES: { [id: string]: Property } = {\n    present_value: { id: 85, type: \"mixed\", default: 0, valueType: 0 },\n    statusFlags: { id: 111, type: \"number\", default: 0, valueType: 8 },\n  };\n\n  private async createStates(): Promise<void> {\n    for (let idx = 0; idx < this.devices.length; idx++) {\n      const dev: Device = this.devices[idx];\n      this.log.debug(`creating states for ${dev.name}...`);\n      const deviceObj: ioBroker.Object = {\n        type: \"device\",\n        common: {\n          name: `${dev.name}`,\n        },\n        native: {},\n        _id: `dev.${dev.name}`,\n      };\n      await this.setObjectNotExistsAsync(`dev.${dev.name}`, deviceObj);\n\n      for (let oIdx = 0; oIdx < dev.objects.length; oIdx++) {\n        const obj = dev.objects[oIdx];\n\n        const channelId = `dev.${dev.name}.${obj.objectName}`;\n\n        const channelObj: ioBroker.Object = {\n          type: \"channel\",\n          common: {\n            name: obj.description,\n          },\n          native: {},\n          _id: channelId,\n        };\n        await this.setObjectNotExistsAsync(channelId, channelObj);\n\n        for (const prop in this.PROPERTIES) {\n          const propId = `dev.${dev.name}.${obj.objectName}.${prop}`;\n\n          const propObj: ioBroker.StateObject = {\n            type: \"state\",\n            common: {\n              type:\n                prop == \"present_value\"\n                  ? obj.binary\n                    ? \"boolean\"\n                    : \"number\"\n                  : this.PROPERTIES[prop].type,\n              read: true,\n              write: true,\n              role: \"value\",\n              name: `Prop ${prop}`,\n              def:\n                prop == \"present_value\"\n                  ? obj.binary\n                    ? false\n                    : 0\n                  : this.PROPERTIES[prop].default,\n            },\n            native: {},\n            _id: propId,\n          };\n\n          await this.setObjectNotExistsAsync(propId, propObj);\n        }\n      }\n    }\n  }\n  /**\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\n   */\n  private onUnload(callback: () => void): void {\n    try {\n      // unsubscribe\n\n      this.clearInterval(this.pollInterval);\n\n      this.unsubscribeCOVs()\n        .catch(() => {})\n        .finally(() => {\n          this.bacnet.close();\n        });\n\n      callback();\n    } catch {\n      callback();\n    }\n  }\n\n  private async unsubscribeCOVs(): Promise<void> {\n    const promises: Promise<void>[] = [];\n    this.devices.forEach((dev: Device) => {\n      let id = 80;\n      dev.objects.forEach((obj: BACnetObject) => {\n        if (!obj.subscribe) return;\n        this.log.debug(`unsubscribing to ${dev.name}/${obj.objectName}`);\n        const promise = this.bacnet\n          .subscribeCov(\n            { address: dev.ip },\n            { type: obj.type, instance: obj.objectId },\n            id++,\n            false,\n            false,\n            1,\n          )\n          .catch((e) => {\n            this.log.error(\n              `Failed to subscribe to ${dev.name}/${obj.objectName}: ${e}`,\n            );\n          });\n        promises.push(promise);\n      });\n    });\n    await Promise.allSettled(promises);\n  }\n\n  // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n  // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n  // /**\n  //  * Is called if a subscribed object changes\n  //  */\n  // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n  // \tif (obj) {\n  // \t\t// The object was changed\n  // \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n  // \t} else {\n  // \t\t// The object was deleted\n  // \t\tthis.log.info(`object ${id} deleted`);\n  // \t}\n  // }\n\n  /**\n   * Is called if a subscribed state changes\n   */\n  private onStateChange(\n    id: string,\n    state: ioBroker.State | null | undefined,\n  ): void {\n    if (state) {\n      if (state.ack) return;\n      const regex = /dev\\.([^\\.]+)\\.([^\\.]+)\\.(.*)$/g;\n      const matches = [...id.matchAll(regex)][0];\n      this.log.debug(JSON.stringify(matches));\n\n      const dev = this.devices.find((dev: Device) => dev.name == matches[1]);\n      let obj: BACnetObject | undefined;\n      if (dev != undefined) {\n        obj = dev.objects.find(\n          (obj: BACnetObject) => obj.objectName == matches[2],\n        );\n      }\n\n      if (dev == undefined || obj == undefined) {\n        this.log.error(`state ${id} has no config entry`);\n        return;\n      }\n\n      this.sendObject(dev, obj, matches[3], state.val);\n    }\n  }\n\n  private formatValueType(valueType: number, value: any): any {\n    switch (valueType) {\n      case 0:\n        return 0;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 9:\n      case 10:\n      case 11:\n        return value;\n      case 8:\n        return [{ value: value, bitsUsed: 4 }];\n\n      default:\n        this.log.warn(`Unknown data-type: ${valueType}`);\n        try {\n          return JSON.parse(value);\n        } catch {\n          return {};\n        }\n    }\n  }\n\n  private sendObject(\n    dev: Device,\n    obj: BACnetObject,\n    prop: string,\n    val: any,\n  ): void {\n    this.log.debug(\n      `sending (${obj.valueType}, ${val}) to ${dev.ip}, (${obj.type}, ${obj.objectId}): ${this.PROPERTIES[prop].id}`,\n    );\n\n    if (obj.valueType == undefined) {\n      this.log.error(`Cannot send. value type not fetched yet.`);\n      return;\n    }\n\n    const valueType: number =\n      prop == \"present_value\" ? obj.valueType : this.PROPERTIES[prop].valueType;\n\n    this.bacnet\n      .writeProperty(\n        { address: dev.ip },\n        { type: obj.type, instance: obj.objectId },\n        this.PROPERTIES[prop].id,\n        [{ type: valueType, value: this.formatValueType(valueType, val) }],\n        {},\n      )\n      .catch((e) => {\n        this.log.error(\n          `Failed to send ${dev.name}/${obj.objectId}/${prop}: ${e}`,\n        );\n      })\n      .finally(() => {\n        this.setTimeout(() => {\n          this.pollProperty(dev, obj, prop);\n        }, 100);\n      });\n  }\n\n  private async findDevices(): Promise<BACnetDevice[]> {\n    return await new Promise<BACnetDevice[]>((resolve) => {\n      const addresses: BACnetDevice[] = [];\n      const callback = (data: any): void => {\n        if (!data.header || !data.payload) return;\n        const dev: BACnetDevice = {\n          ip: data.header.sender.address,\n          instance: data.payload.deviceId,\n          name: \"\",\n        };\n        this.bacnet\n          .readProperty(\n            { address: data.header.sender.address },\n            { instance: data.payload.deviceId, type: ObjectType.DEVICE },\n            PropertyIdentifier.OBJECT_NAME,\n          )\n          .then((v) => {\n            dev.name = v.values[0].value;\n            addresses.push(dev);\n          })\n          .catch(() => {});\n        addresses.push();\n      };\n      this.bacnet.on(\"iAm\", callback);\n      this.bacnet.whoIs();\n      this.setTimeout(() => {\n        this.bacnet.off(\"iAm\", callback);\n        resolve(addresses);\n      }, 5000);\n    });\n  }\n\n  private async findObjectsFromDeviceIp(ip: string): Promise<BACnetObj[]> {\n    return this.findObjectsFromDevice(await this.findDevice(ip));\n  }\n\n  private async findObjectsFromDevice(dev: BACnetDevice): Promise<BACnetObj[]> {\n    const objs: BACnetObj[] = [];\n    const vals = await this.bacnet.readProperty(\n      { address: dev.ip },\n      { instance: dev.instance, type: ObjectType.DEVICE },\n      PropertyIdentifier.OBJECT_LIST,\n    );\n    const promises: Promise<void>[] = [];\n    return await new Promise<BACnetObj[]>((resolve) => {\n      vals.values.forEach((v) => {\n        const obj: BACnetObj = {\n          id: v.value.instance,\n          type: v.value.type,\n          name: \"\",\n          desc: \"\",\n        };\n        objs.push(obj);\n        const p = this.bacnet\n          .readProperty(\n            { address: dev.ip },\n            { instance: v.value.instance, type: v.value.type },\n            PropertyIdentifier.OBJECT_NAME,\n          )\n          .then((v) => {\n            obj.name = v.values[0].value;\n          })\n          .catch(() => {});\n        promises.push(p);\n        const p2 = this.bacnet\n          .readProperty(\n            { address: dev.ip },\n            { instance: v.value.instance, type: v.value.type },\n            PropertyIdentifier.DESCRIPTION,\n          )\n          .then((v) => {\n            obj.desc = v.values[0].value;\n          })\n          .catch(() => {});\n        promises.push(p2);\n      });\n\n      Promise.allSettled(promises).then(() => {\n        resolve(objs);\n      });\n    });\n  }\n\n  private async findDevice(ip: string): Promise<BACnetDevice> {\n    return await new Promise<BACnetDevice>((resolve, reject) => {\n      const callback = (data: any): void => {\n        if (!data.header || !data.payload) return;\n        const dev: BACnetDevice = {\n          ip: data.header.sender.address,\n          instance: data.payload.deviceId,\n          name: \"\",\n        };\n        this.bacnet.off(\"iAm\", callback);\n        this.bacnet\n          .readProperty(\n            { address: data.header.sender.address },\n            { instance: data.payload.deviceId, type: ObjectType.DEVICE },\n            PropertyIdentifier.OBJECT_NAME,\n          )\n          .then((v) => {\n            dev.name = v.values[0].value;\n            resolve(dev);\n          })\n          .catch((e) => {\n            reject(e);\n          });\n      };\n      this.bacnet.on(\"iAm\", callback);\n      this.bacnet.whoIs({ address: ip });\n      this.setTimeout(() => {\n        this.bacnet.off(\"iAm\", callback);\n        reject();\n      }, 5000);\n    });\n  }\n\n  // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n  // /**\n  //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n  //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n  //  */\n  // private onMessage(obj: ioBroker.Message): void {\n  // \tif (typeof obj === 'object' && obj.message) {\n  // \t\tif (obj.command === 'send') {\n  // \t\t\t// e.g. send email or pushover or whatever\n  // \t\t\tthis.log.info('send command');\n\n  // \t\t\t// Send response in callback if required\n  // \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n  // \t\t}\n  // \t}\n  // }\n}\n\nif (require.main !== module) {\n  // Export the constructor in compact mode\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) =>\n    new BacnetAdapter(options);\n} else {\n  // otherwise start the instance directly\n  (() => new BacnetAdapter())();\n}\n"],
  "mappings": "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",
  "names": ["Bacnet", "dev", "obj", "v"]
}
