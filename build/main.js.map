{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\nimport * as utils from '@iobroker/adapter-core';\nimport Bacnet, { ApplicationTag, ObjectType, PropertyIdentifier } from '@bacnet-js/client';\n\ntype BACnetDevice  = {\n\tip: string;\n\tinstance: number;\n\tname: string;\n};\ntype BACnetObj  = {\n\tid: number;\n\ttype: number;\n\tname: string;\n\tdesc: string;\n};\n\n\ntype Device = {\n\tip: string;\n\tport: number;\n\tname: string;\n\tobjects: BACnetObject[];\n};\n\ntype BACnetObject = {\n\tobjectId: number;\n\tobjectName: string;\n\tdescription: string;\n\ttype: number;\n\tsubscribe: boolean;\n\tbinary?: boolean;\n\tvalueType?: ApplicationTag;\n};\ntype Property = {\n\tid: number;\n\ttype: ioBroker.CommonType;\n\tdefault: any;\n\tvalueType: ApplicationTag;\n};\n\nclass BacnetAdapter extends utils.Adapter {\n\n\tprivate bacnet: Bacnet = new Bacnet();\n\tprivate devices: Device[] = [];\n\tprivate pollInterval?: ioBroker.Interval = null;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'bacnet',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\tthis.setState('info.connection', false, true);\n\n\t\tthis.devices = [];\n\n\t\tthis.config.devices.forEach((dev: Device) => {\n\t\t\tdev.name = dev.name.replace(this.FORBIDDEN_CHARS, '_');\n\t\t\tif (this.devices.some((d: Device) => d.name == dev.name || d.ip == dev.ip)) {\n\t\t\t\tthis.log.warn(`Skipping device ${dev.name} with ${dev.objects.length} object(s). Name or ip address already exists.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst objects: BACnetObject[] = [];\n\t\t\tdev.objects.forEach((obj: BACnetObject) => {\n\t\t\t\tobj.objectName = obj.objectName.replace(this.FORBIDDEN_CHARS, '_');\n\t\t\t\tif (objects.some((o: BACnetObject) => o.objectId == obj.objectId || o.objectName == obj.objectName)) {\n\t\t\t\t\tthis.log.warn(`Skipping obj ${dev.name}/${obj.objectName}. Name or object id already exists.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tobj.binary = obj.type == ObjectType.BINARY_INPUT || obj.type == ObjectType.BINARY_OUTPUT || obj.type == ObjectType.BINARY_VALUE;\n\t\t\t\tobjects.push(obj);\n\n\t\t\t});\n\t\t\tdev.objects = objects;\n\t\t\tthis.devices.push(dev);\n\t\t});\n\n\t\tawait this.updateStates();\n\t\tthis.subscribeStates(`dev.*`);\n\n\t\tthis.log.debug(`binding to local port ${this.config.port}`);\n\t\tconst client = new Bacnet({\n\t\t\tport: this.config.port,\n\t\t\tinterface: this.config.ip\n\t\t});\n\n\t\tthis.bacnet = client;\n\n\n\t\tif (this.config.pollInterval < 0 || isNaN(this.config.pollInterval)) {\n\t\t\tthis.log.warn('poll interval cannot be smaller than 0! Using default: 10s');\n\t\t\tthis.config.pollInterval = 10;\n\t\t}\n\n\t\tthis.pollInterval = this.setInterval(() => {\n\t\t\tthis.log.debug('POLLING VALUES...');\n\t\t\tthis.pollValues();\n\t\t}, this.config.pollInterval * 1000);\n\t\tthis.pollValues();\n\n\n\t\tthis.bacnet.on('covNotifyUnconfirmed', (data: any) => {\n\t\t\tthis.handleCOV(data);\n\t\t});\n\n\t\t// subscribe\n\t\tthis.devices.forEach((dev: Device) => {\n\t\t\tlet id = 80;\n\t\t\tdev.objects.forEach((obj: BACnetObject) => {\n\t\t\t\tif (!obj.subscribe) return;\n\t\t\t\tthis.log.debug(`subscribing to ${dev.name}/${obj.objectName}`);\n\t\t\t\tthis.bacnet.subscribeCov(\n\t\t\t\t\t{address: dev.ip},\n\t\t\t\t\t{type: obj.type, instance: obj.objectId},\n\t\t\t\t\tid++,\n\t\t\t\t\tfalse,\n\t\t\t\t\tfalse,\n\t\t\t\t\t0\n\t\t\t\t).catch((e) => {\n\t\t\t\t\tthis.log.error(`Failed to subscribe to ${dev.name}/${obj.objectName}: ${e}`);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\n\t}\n\n\tprivate handleCOV(data: any): void {\n\t\ttry {\n\t\t\tconst dev: Device = this.devices.find((dev: Device) => data.header.sender.address == dev.ip)!;\n\t\t\tif (dev == undefined) {\n\t\t\t\tthis.log.warn(`Received COV for not configured device (ip: ${data.header.sender.address})`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst obj: BACnetObject = dev.objects.find((obj: BACnetObject) => obj.objectId == data.payload.monitoredObjectId.instance)!;\n\t\t\tif (obj == undefined) {\n\t\t\t\tthis.log.warn(`Received COV for not configured object (id: ${data.payload.monitoredObjectId.instance})`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdata.payload.values.forEach((val: any) => {\n\t\t\t\tlet prop = '';\n\t\t\t\tfor (const p in this.PROPERTIES) {\n\t\t\t\t\tif (this.PROPERTIES[p].id == val.property.id) {\n\t\t\t\t\t\tprop = p;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (prop == '') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.setBACnetState(dev, obj, prop, this.handleValue(val.value[0].type, val.value[0].value))\n\n\t\t\t});\n\t\t\tif (obj == undefined) {\n\t\t\t\tthis.log.warn(`No state found for cov (${JSON.stringify(data.payload.monitoredObjectId)}`);\n\t\t\t}\n\t\t}catch (e) {\n\t\t\tthis.log.error(`Failed to parse COV: ${e}`);\n\t\t}\n\t}\n\n\tprivate pollValues(): void {\n\t\tconst promises: Promise<void>[] = [];\n\t\tthis.devices.forEach((dev: Device) => {\n\t\t\tdev.objects.forEach((obj: BACnetObject) => {\n\t\t\t\tfor (const prop in this.PROPERTIES) {\n\t\t\t\t\tpromises.push(this.pollProperty(dev, obj, prop));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tPromise.all(promises).catch(() => {\n\t\t\tthis.setState('info.connection', false, true);\n\t\t}).then(() => {\n\t\t\tthis.setState('info.connection', true, true);\n\t\t});\n\t}\n\n\tprivate async pollProperty(dev: Device, obj: BACnetObject, prop: string): Promise<void> {\n\t\treturn await new Promise<void>((resolve, reject) => {\n\t\t\tthis.bacnet.readProperty({address: dev.ip}, {type: obj.type, instance: obj.objectId}, this.PROPERTIES[prop].id).then((value) => {\n\t\t\t\tthis.log.debug(`received ${JSON.stringify(value)} for ${prop}`);\n\t\t\t\tif(prop == 'present_value') obj.valueType = value.values[0].type;\n\t\t\t\tconst v = this.handleValue(value.values[0].type, value.values[0].value);\n\t\t\t\tthis.setBACnetState(dev, obj, prop, v);\n\t\t\t\tresolve();\n\t\t\t}).catch((err) => {\n\t\t\t\tthis.log.error(`Failed to poll: ${dev.name}/${obj.objectId}: ${err}`);\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate handleValue(dataType: number, value: any): any {\n\t\tswitch(dataType) {\n\t\t\tcase 0:\n\t\t\t\treturn 0;\n\t\t\tcase 1:\n\t\t\t\treturn value == 1;\n\t\t\tcase 2:\n\t\t\t\treturn value >>> 0;\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 7:\n\t\t\tcase 9:\n\t\t\tcase 10:\n\t\t\tcase 11:\n\t\t\t\treturn value;\n\t\t\tcase 8:\n\t\t\t\treturn value.value[0];\n\n\t\t\tdefault:\n\t\t\t\tthis.log.warn(`Unknown data-type: ${dataType}`);\n\t\t\t\treturn JSON.stringify(value);\n\n\t\t}\n\t}\n\n\tprivate setBACnetState(dev: Device, obj: BACnetObject, prop: string, value: any): void {\n\t\tconst id = `dev.${dev.name}.${obj.objectName}.${prop}`;\n\t\tthis.log.debug(`setting ${JSON.stringify(value)} to ${id}..`);\n\t\tthis.setState(id, prop == 'present_value' && obj.binary ? value == 1 : value, true).catch((e) => {\n\t\t\tthis.log.error(e);\n\t\t});;\n\t}\n\n\n\tprivate async updateStates(): Promise<void> {\n\t\tawait this.deleteUnusedStates();\n\t\tawait this.createStates();\n\t}\n\n\tprivate async deleteUnusedStates(): Promise<void> {\n\t\tconst objects = await this.getAdapterObjectsAsync();\n\t\tfor(const s in objects) {\n\t\t\tif (!s.startsWith(`${this.name}.${this.instance}.dev`)) continue;\n\n\t\t\tif (objects[s].type == 'channel' && this.isBACnetObjectFromId(s)) {\n\t\t\t\tawait this.delObjectAsync(s, {recursive: true});\n\t\t\t}\n\t\t\tif (objects[s].type == 'device' && this.devices.find((dev: Device) => dev.name == s) == undefined) {\n\t\t\t\tawait this.delObjectAsync(s, {recursive: true});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate isBACnetObjectFromId(id: string): boolean {\n\t\treturn this.devices.some((dev: Device) => dev.objects.some((obj) => id == `dev.${dev.name}.${obj.objectName}`));\n\t}\n\n\n\tprivate PROPERTIES: {[id: string] : Property} =\n\t\t{\n\t\t\t'present_value': {id: 85, type: 'mixed', default: 0, valueType: 0},\n\t\t\t'statusFlags': {id: 111, type: 'number', default: 0, valueType: 8}\n\t\t};\n\n\tprivate async createStates(): Promise<void> {\n\t\tfor (let idx = 0; idx < this.devices.length; idx++) {\n\t\t\tconst dev: Device = this.devices[idx];\n\t\t\tthis.log.debug(`creating states for ${dev.name}...`);\n\t\t\tconst deviceObj: ioBroker.Object = {\n\t\t\t\ttype: 'device',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `${dev.name}`,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t\t_id: `dev.${dev.name}`,\n\t\t\t};\n\t\t\tawait this.setObjectNotExistsAsync(`dev.${dev.name}`, deviceObj);\n\n\t\t\tfor (let oIdx = 0; oIdx < dev.objects.length; oIdx++) {\n\t\t\t\tconst obj = dev.objects[oIdx];\n\n\t\t\t\tconst channelId = `dev.${dev.name}.${obj.objectName}`;\n\n\t\t\t\tconst channelObj: ioBroker.Object = {\n\t\t\t\t\ttype: 'channel',\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: obj.description,\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t\t_id: channelId\n\t\t\t\t};\n\t\t\t\tawait this.setObjectNotExistsAsync(channelId, channelObj);\n\n\n\t\t\t\tfor (const prop in this.PROPERTIES) {\n\t\t\t\t\tconst propId = `dev.${dev.name}.${obj.objectName}.${prop}`;\n\n\t\t\t\t\tconst propObj: ioBroker.StateObject = {\n\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\ttype: prop == 'present_value' ? (obj.binary ? 'boolean' : 'number') : this.PROPERTIES[prop].type,\n\t\t\t\t\t\t\tread: true,\n\t\t\t\t\t\t\twrite: true,\n\t\t\t\t\t\t\trole: 'value',\n\t\t\t\t\t\t\tname: `Prop ${prop}`,\n\t\t\t\t\t\t\tdef: prop == 'present_value' ? (obj.binary ? false : 0) : this.PROPERTIES[prop].default,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t_id: propId,\n\t\t\t\t\t};\n\n\t\t\t\t\tawait this.setObjectNotExistsAsync(propId, propObj);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// unsubscribe\n\n\t\t\tthis.clearInterval(this.pollInterval);\n\n\t\t\tthis.unsubscribeCOVs().catch(() => {}).finally(() => {\n\t\t\t\tthis.bacnet.close();\n\t\t\t});\n\n\t\t\tcallback();\n\t\t} catch {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tprivate async unsubscribeCOVs(): Promise<void> {\n\t\tconst promises: Promise<void>[] = [];\n\t\tthis.devices.forEach((dev: Device) => {\n\t\t\tlet id = 80;\n\t\t\tdev.objects.forEach((obj: BACnetObject) => {\n\t\t\t\tif (!obj.subscribe) return;\n\t\t\t\tthis.log.debug(`unsubscribing to ${dev.name}/${obj.objectName}`);\n\t\t\t\tconst promise = this.bacnet.subscribeCov(\n\t\t\t\t\t{address: dev.ip},\n\t\t\t\t\t{type: obj.type, instance: obj.objectId},\n\t\t\t\t\tid++,\n\t\t\t\t\tfalse,\n\t\t\t\t\tfalse,\n\t\t\t\t\t1\n\t\t\t\t).catch((e) => {\n\t\t\t\t\tthis.log.error(`Failed to subscribe to ${dev.name}/${obj.objectName}: ${e}`);\n\t\t\t\t});\n\t\t\t\tpromises.push(promise);\n\t\t\t});\n\t\t});\n\t\tawait Promise.allSettled(promises);\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\tif (state.ack) return;\n\t\t\tconst regex = /dev\\.([^\\.]+)\\.([^\\.]+)\\.(.*)$/g\n\t\t\tconst matches = [...id.matchAll(regex)][0];\n\t\t\tthis.log.debug(JSON.stringify(matches));\n\n\t\t\tconst dev = this.devices.find((dev: Device) => dev.name == matches[1]);\n\t\t\tlet obj: BACnetObject | undefined;\n\t\t\tif (dev != undefined) {\n\t\t\t\tobj = dev.objects.find((obj: BACnetObject) => obj.objectName == matches[2]);\n\t\t\t}\n\n\t\t\tif (dev == undefined || obj == undefined) {\n\t\t\t\tthis.log.error(`state ${id} has no config entry`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.sendObject(dev, obj, matches[3], state.val);\n\n\t\t}\n\t}\n\n\tprivate formatValueType(valueType: number, value: any): any {\n\t\tswitch(valueType) {\n\t\t\tcase 0:\n\t\t\t\treturn 0;\n\t\t\tcase 1:\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 7:\n\t\t\tcase 9:\n\t\t\tcase 10:\n\t\t\tcase 11:\n\t\t\t\treturn value;\n\t\t\tcase 8:\n\t\t\t\treturn [{value: value, bitsUsed: 4}];\n\n\t\t\tdefault:\n\t\t\t\tthis.log.warn(`Unknown data-type: ${valueType}`);\n\t\t\t\ttry {\n\t\t\t\t\treturn JSON.parse(value);\n\t\t\t\t}catch {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\n\t\t}\n\t}\n\n\tprivate sendObject(dev: Device, obj: BACnetObject, prop: string, val: any): void {\n\t\tthis.log.debug(`sending (${obj.valueType}, ${val}) to ${dev.ip}, (${obj.type}, ${obj.objectId}): ${this.PROPERTIES[prop].id}`);\n\n\n\t\tif (obj.valueType == undefined) {\n\t\t\tthis.log.error(`Cannot send. value type not fetched yet.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueType: number = prop == 'present_value' ? obj.valueType : this.PROPERTIES[prop].valueType;\n\n\t\tthis.bacnet.writeProperty({address: dev.ip}, {type: obj.type, instance: obj.objectId}, this.PROPERTIES[prop].id, [\n\t\t\t{type: valueType, value: this.formatValueType(valueType, val)}\n\t\t], {}).catch((e) => {\n\t\t\tthis.log.error(`Failed to send ${dev.name}/${obj.objectId}/${prop}: ${e}`);\n\t\t}).finally(() => {\n\t\t\tthis.setTimeout(() => {\n\t\t\t\tthis.pollProperty(dev, obj, prop);\n\t\t\t}, 100);\n\t\t});\n\t}\n\n\tprivate async findDevices(): Promise<BACnetDevice[]> {\n\t\treturn await new Promise<BACnetDevice[]>((resolve) => {\n\t\t\tconst addresses: BACnetDevice[] = [];\n\t\t\tconst callback = (data: any): void => {\n\t\t\t\tif (!data.header || !data.payload) return;\n\t\t\t\tlet dev: BACnetDevice = {ip: data.header.sender.address, instance: data.payload.deviceId, name: \"\"};\n\t\t\t\tthis.bacnet.readProperty(\n\t\t\t\t\t{address: data.header.sender.address},\n\t\t\t\t\t{instance: data.payload.deviceId, type: ObjectType.DEVICE},\n\t\t\t\t\tPropertyIdentifier.OBJECT_NAME\n\t\t\t\t).then((v) => {\n\t\t\t\t\tdev.name = v.values[0].value;\n\t\t\t\t\taddresses.push(dev);\n\t\t\t\t}).catch(() => {\n\t\t\t\t});\n\t\t\t\taddresses.push();\n\t\t\t};\n\t\t\tthis.bacnet.on('iAm', callback);\n\t\t\tthis.bacnet.whoIs();\n\t\t\tthis.setTimeout(() => {\n\t\t\t\tthis.bacnet.off('iAm', callback);\n\t\t\t\tresolve(addresses);\n\t\t\t}, 5000);\n\t\t});\n\t}\n\n\tprivate async findObjectsFromDeviceIp(ip: string): Promise<BACnetObj[]> {\n\t\treturn this.findObjectsFromDevice(await this.findDevice(ip));\n\t}\n\n\tprivate async findObjectsFromDevice(dev: BACnetDevice): Promise<BACnetObj[]> {\n\t\tconst objs: BACnetObj[] = [];\n\t\tconst vals = await this.bacnet.readProperty(\n\t\t\t{address: dev.ip},\n\t\t\t{instance: dev.instance, type: ObjectType.DEVICE},\n\t\t\tPropertyIdentifier.OBJECT_LIST\n\t\t);\n\t\tconst promises: Promise<void>[] = [];\n\t\treturn await new Promise<BACnetObj[]> ((resolve) => {\n\t\t\tvals.values.forEach((v) => {\n\t\t\t\tconst obj: BACnetObj = {id: v.value.instance, type: v.value.type, name: '', desc: ''};\n\t\t\t\tobjs.push(obj);\n\t\t\t\tconst p = this.bacnet.readProperty(\n\t\t\t\t\t{address: dev.ip},\n\t\t\t\t\t{instance: v.value.instance, type: v.value.type},\n\t\t\t\t\tPropertyIdentifier.OBJECT_NAME\n\t\t\t\t).then((v) => {\n\t\t\t\t\tobj.name = v.values[0].value;\n\t\t\t\t}).catch(() => {\n\t\t\t\t});\n\t\t\t\tpromises.push(p);\n\t\t\t\tconst p2 = this.bacnet.readProperty(\n\t\t\t\t\t{address: dev.ip},\n\t\t\t\t\t{instance: v.value.instance, type: v.value.type},\n\t\t\t\t\tPropertyIdentifier.DESCRIPTION\n\t\t\t\t).then((v) => {\n\t\t\t\t\tobj.desc = v.values[0].value;\n\t\t\t\t}).catch(() => {\n\t\t\t\t});\n\t\t\t\tpromises.push(p2);\n\t\t\t});\n\n\t\t\tPromise.allSettled(promises).then(() => {\n\t\t\t\tresolve(objs);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async findDevice(ip: string): Promise<BACnetDevice> {\n\t\treturn await new Promise<BACnetDevice>((resolve, reject) => {\n\t\t\tconst callback = (data: any): void => {\n\t\t\t\tif (!data.header || !data.payload) return;\n\t\t\t\tlet dev: BACnetDevice = {ip: data.header.sender.address, instance: data.payload.deviceId, name: \"\"};\n\t\t\t\tthis.bacnet.off('iAm', callback);\n\t\t\t\tthis.bacnet.readProperty(\n\t\t\t\t\t{address: data.header.sender.address},\n\t\t\t\t\t{instance: data.payload.deviceId, type: ObjectType.DEVICE},\n\t\t\t\t\tPropertyIdentifier.OBJECT_NAME\n\t\t\t\t).then((v) => {\n\t\t\t\t\tdev.name = v.values[0].value;\n\t\t\t\t\tresolve(dev);\n\t\t\t\t}).catch((e) => {\n\t\t\t\t\treject(e);\n\t\t\t\t});\n\t\t\t};\n\t\t\tthis.bacnet.on('iAm', callback);\n\t\t\tthis.bacnet.whoIs({address: ip});\n\t\t\tthis.setTimeout(() => {\n\t\t\t\tthis.bacnet.off('iAm', callback);\n\t\t\t\treject();\n\t\t\t}, 5000);\n\t\t});\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new BacnetAdapter(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new BacnetAdapter())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAIA,YAAuB;AACvB,oBAAuE;AAsCvE,MAAM,sBAAsB,MAAM,QAAQ;AAAA,EAEjC,SAAiB,IAAI,cAAAA,QAAO;AAAA,EAC5B,UAAoB,CAAC;AAAA,EACrB,eAAmC;AAAA,EAEpC,YAAY,UAAyC,CAAC,GAAG;AAC/D,UAAM;AAAA,MACL,GAAG;AAAA,MACH,MAAM;AAAA,IACP,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAEpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,UAAyB;AACtC,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAE5C,SAAK,UAAU,CAAC;AAEhB,SAAK,OAAO,QAAQ,QAAQ,CAAC,QAAgB;AAC5C,UAAI,OAAO,IAAI,KAAK,QAAQ,KAAK,iBAAiB,GAAG;AACrD,UAAI,KAAK,QAAQ,KAAK,CAAC,MAAc,EAAE,QAAQ,IAAI,QAAQ,EAAE,MAAM,IAAI,EAAE,GAAG;AAC3E,aAAK,IAAI,KAAK,mBAAmB,IAAI,IAAI,SAAS,IAAI,QAAQ,MAAM,gDAAgD;AACpH;AAAA,MACD;AACA,YAAM,UAA0B,CAAC;AACjC,UAAI,QAAQ,QAAQ,CAAC,QAAsB;AAC1C,YAAI,aAAa,IAAI,WAAW,QAAQ,KAAK,iBAAiB,GAAG;AACjE,YAAI,QAAQ,KAAK,CAAC,MAAoB,EAAE,YAAY,IAAI,YAAY,EAAE,cAAc,IAAI,UAAU,GAAG;AACpG,eAAK,IAAI,KAAK,gBAAgB,IAAI,IAAI,IAAI,IAAI,UAAU,qCAAqC;AAC7F;AAAA,QACD;AACA,YAAI,SAAS,IAAI,QAAQ,yBAAW,gBAAgB,IAAI,QAAQ,yBAAW,iBAAiB,IAAI,QAAQ,yBAAW;AACnH,gBAAQ,KAAK,GAAG;AAAA,MAEjB,CAAC;AACD,UAAI,UAAU;AACd,WAAK,QAAQ,KAAK,GAAG;AAAA,IACtB,CAAC;AAED,UAAM,KAAK,aAAa;AACxB,SAAK,gBAAgB,OAAO;AAE5B,SAAK,IAAI,MAAM,yBAAyB,KAAK,OAAO,IAAI,EAAE;AAC1D,UAAM,SAAS,IAAI,cAAAA,QAAO;AAAA,MACzB,MAAM,KAAK,OAAO;AAAA,MAClB,WAAW,KAAK,OAAO;AAAA,IACxB,CAAC;AAED,SAAK,SAAS;AAGd,QAAI,KAAK,OAAO,eAAe,KAAK,MAAM,KAAK,OAAO,YAAY,GAAG;AACpE,WAAK,IAAI,KAAK,4DAA4D;AAC1E,WAAK,OAAO,eAAe;AAAA,IAC5B;AAEA,SAAK,eAAe,KAAK,YAAY,MAAM;AAC1C,WAAK,IAAI,MAAM,mBAAmB;AAClC,WAAK,WAAW;AAAA,IACjB,GAAG,KAAK,OAAO,eAAe,GAAI;AAClC,SAAK,WAAW;AAGhB,SAAK,OAAO,GAAG,wBAAwB,CAAC,SAAc;AACrD,WAAK,UAAU,IAAI;AAAA,IACpB,CAAC;AAGD,SAAK,QAAQ,QAAQ,CAAC,QAAgB;AACrC,UAAI,KAAK;AACT,UAAI,QAAQ,QAAQ,CAAC,QAAsB;AAC1C,YAAI,CAAC,IAAI,UAAW;AACpB,aAAK,IAAI,MAAM,kBAAkB,IAAI,IAAI,IAAI,IAAI,UAAU,EAAE;AAC7D,aAAK,OAAO;AAAA,UACX,EAAC,SAAS,IAAI,GAAE;AAAA,UAChB,EAAC,MAAM,IAAI,MAAM,UAAU,IAAI,SAAQ;AAAA,UACvC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD,EAAE,MAAM,CAAC,MAAM;AACd,eAAK,IAAI,MAAM,0BAA0B,IAAI,IAAI,IAAI,IAAI,UAAU,KAAK,CAAC,EAAE;AAAA,QAC5E,CAAC;AAAA,MACF,CAAC;AAAA,IACF,CAAC;AAAA,EAGF;AAAA,EAEQ,UAAU,MAAiB;AAClC,QAAI;AACH,YAAM,MAAc,KAAK,QAAQ,KAAK,CAACC,SAAgB,KAAK,OAAO,OAAO,WAAWA,KAAI,EAAE;AAC3F,UAAI,OAAO,QAAW;AACrB,aAAK,IAAI,KAAK,+CAA+C,KAAK,OAAO,OAAO,OAAO,GAAG;AAC1F;AAAA,MACD;AACA,YAAM,MAAoB,IAAI,QAAQ,KAAK,CAACC,SAAsBA,KAAI,YAAY,KAAK,QAAQ,kBAAkB,QAAQ;AACzH,UAAI,OAAO,QAAW;AACrB,aAAK,IAAI,KAAK,+CAA+C,KAAK,QAAQ,kBAAkB,QAAQ,GAAG;AACvG;AAAA,MACD;AAEA,WAAK,QAAQ,OAAO,QAAQ,CAAC,QAAa;AACzC,YAAI,OAAO;AACX,mBAAW,KAAK,KAAK,YAAY;AAChC,cAAI,KAAK,WAAW,CAAC,EAAE,MAAM,IAAI,SAAS,IAAI;AAC7C,mBAAO;AACP;AAAA,UACD;AAAA,QACD;AACA,YAAI,QAAQ,IAAI;AACf;AAAA,QACD;AACA,aAAK,eAAe,KAAK,KAAK,MAAM,KAAK,YAAY,IAAI,MAAM,CAAC,EAAE,MAAM,IAAI,MAAM,CAAC,EAAE,KAAK,CAAC;AAAA,MAE5F,CAAC;AACD,UAAI,OAAO,QAAW;AACrB,aAAK,IAAI,KAAK,2BAA2B,KAAK,UAAU,KAAK,QAAQ,iBAAiB,CAAC,EAAE;AAAA,MAC1F;AAAA,IACD,SAAQ,GAAG;AACV,WAAK,IAAI,MAAM,wBAAwB,CAAC,EAAE;AAAA,IAC3C;AAAA,EACD;AAAA,EAEQ,aAAmB;AAC1B,UAAM,WAA4B,CAAC;AACnC,SAAK,QAAQ,QAAQ,CAAC,QAAgB;AACrC,UAAI,QAAQ,QAAQ,CAAC,QAAsB;AAC1C,mBAAW,QAAQ,KAAK,YAAY;AACnC,mBAAS,KAAK,KAAK,aAAa,KAAK,KAAK,IAAI,CAAC;AAAA,QAChD;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AACD,YAAQ,IAAI,QAAQ,EAAE,MAAM,MAAM;AACjC,WAAK,SAAS,mBAAmB,OAAO,IAAI;AAAA,IAC7C,CAAC,EAAE,KAAK,MAAM;AACb,WAAK,SAAS,mBAAmB,MAAM,IAAI;AAAA,IAC5C,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,aAAa,KAAa,KAAmB,MAA6B;AACvF,WAAO,MAAM,IAAI,QAAc,CAAC,SAAS,WAAW;AACnD,WAAK,OAAO,aAAa,EAAC,SAAS,IAAI,GAAE,GAAG,EAAC,MAAM,IAAI,MAAM,UAAU,IAAI,SAAQ,GAAG,KAAK,WAAW,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,UAAU;AAC/H,aAAK,IAAI,MAAM,YAAY,KAAK,UAAU,KAAK,CAAC,QAAQ,IAAI,EAAE;AAC9D,YAAG,QAAQ,gBAAiB,KAAI,YAAY,MAAM,OAAO,CAAC,EAAE;AAC5D,cAAM,IAAI,KAAK,YAAY,MAAM,OAAO,CAAC,EAAE,MAAM,MAAM,OAAO,CAAC,EAAE,KAAK;AACtE,aAAK,eAAe,KAAK,KAAK,MAAM,CAAC;AACrC,gBAAQ;AAAA,MACT,CAAC,EAAE,MAAM,CAAC,QAAQ;AACjB,aAAK,IAAI,MAAM,mBAAmB,IAAI,IAAI,IAAI,IAAI,QAAQ,KAAK,GAAG,EAAE;AACpE,eAAO,GAAG;AAAA,MACX,CAAC;AAAA,IACF,CAAC;AAAA,EACF;AAAA,EAEQ,YAAY,UAAkB,OAAiB;AACtD,YAAO,UAAU;AAAA,MAChB,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AACJ,eAAO,SAAS;AAAA,MACjB,KAAK;AACJ,eAAO,UAAU;AAAA,MAClB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AACJ,eAAO,MAAM,MAAM,CAAC;AAAA,MAErB;AACC,aAAK,IAAI,KAAK,sBAAsB,QAAQ,EAAE;AAC9C,eAAO,KAAK,UAAU,KAAK;AAAA,IAE7B;AAAA,EACD;AAAA,EAEQ,eAAe,KAAa,KAAmB,MAAc,OAAkB;AACtF,UAAM,KAAK,OAAO,IAAI,IAAI,IAAI,IAAI,UAAU,IAAI,IAAI;AACpD,SAAK,IAAI,MAAM,WAAW,KAAK,UAAU,KAAK,CAAC,OAAO,EAAE,IAAI;AAC5D,SAAK,SAAS,IAAI,QAAQ,mBAAmB,IAAI,SAAS,SAAS,IAAI,OAAO,IAAI,EAAE,MAAM,CAAC,MAAM;AAChG,WAAK,IAAI,MAAM,CAAC;AAAA,IACjB,CAAC;AAAE;AAAA,EACJ;AAAA,EAGA,MAAc,eAA8B;AAC3C,UAAM,KAAK,mBAAmB;AAC9B,UAAM,KAAK,aAAa;AAAA,EACzB;AAAA,EAEA,MAAc,qBAAoC;AACjD,UAAM,UAAU,MAAM,KAAK,uBAAuB;AAClD,eAAU,KAAK,SAAS;AACvB,UAAI,CAAC,EAAE,WAAW,GAAG,KAAK,IAAI,IAAI,KAAK,QAAQ,MAAM,EAAG;AAExD,UAAI,QAAQ,CAAC,EAAE,QAAQ,aAAa,KAAK,qBAAqB,CAAC,GAAG;AACjE,cAAM,KAAK,eAAe,GAAG,EAAC,WAAW,KAAI,CAAC;AAAA,MAC/C;AACA,UAAI,QAAQ,CAAC,EAAE,QAAQ,YAAY,KAAK,QAAQ,KAAK,CAAC,QAAgB,IAAI,QAAQ,CAAC,KAAK,QAAW;AAClG,cAAM,KAAK,eAAe,GAAG,EAAC,WAAW,KAAI,CAAC;AAAA,MAC/C;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,qBAAqB,IAAqB;AACjD,WAAO,KAAK,QAAQ,KAAK,CAAC,QAAgB,IAAI,QAAQ,KAAK,CAAC,QAAQ,MAAM,OAAO,IAAI,IAAI,IAAI,IAAI,UAAU,EAAE,CAAC;AAAA,EAC/G;AAAA,EAGQ,aACP;AAAA,IACC,iBAAiB,EAAC,IAAI,IAAI,MAAM,SAAS,SAAS,GAAG,WAAW,EAAC;AAAA,IACjE,eAAe,EAAC,IAAI,KAAK,MAAM,UAAU,SAAS,GAAG,WAAW,EAAC;AAAA,EAClE;AAAA,EAED,MAAc,eAA8B;AAC3C,aAAS,MAAM,GAAG,MAAM,KAAK,QAAQ,QAAQ,OAAO;AACnD,YAAM,MAAc,KAAK,QAAQ,GAAG;AACpC,WAAK,IAAI,MAAM,uBAAuB,IAAI,IAAI,KAAK;AACnD,YAAM,YAA6B;AAAA,QAClC,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM,GAAG,IAAI,IAAI;AAAA,QAClB;AAAA,QACA,QAAQ,CAAC;AAAA,QACT,KAAK,OAAO,IAAI,IAAI;AAAA,MACrB;AACA,YAAM,KAAK,wBAAwB,OAAO,IAAI,IAAI,IAAI,SAAS;AAE/D,eAAS,OAAO,GAAG,OAAO,IAAI,QAAQ,QAAQ,QAAQ;AACrD,cAAM,MAAM,IAAI,QAAQ,IAAI;AAE5B,cAAM,YAAY,OAAO,IAAI,IAAI,IAAI,IAAI,UAAU;AAEnD,cAAM,aAA8B;AAAA,UACnC,MAAM;AAAA,UACN,QAAQ;AAAA,YACP,MAAM,IAAI;AAAA,UACX;AAAA,UACA,QAAQ,CAAC;AAAA,UACT,KAAK;AAAA,QACN;AACA,cAAM,KAAK,wBAAwB,WAAW,UAAU;AAGxD,mBAAW,QAAQ,KAAK,YAAY;AACnC,gBAAM,SAAS,OAAO,IAAI,IAAI,IAAI,IAAI,UAAU,IAAI,IAAI;AAExD,gBAAM,UAAgC;AAAA,YACrC,MAAM;AAAA,YACN,QAAQ;AAAA,cACP,MAAM,QAAQ,kBAAmB,IAAI,SAAS,YAAY,WAAY,KAAK,WAAW,IAAI,EAAE;AAAA,cAC5F,MAAM;AAAA,cACN,OAAO;AAAA,cACP,MAAM;AAAA,cACN,MAAM,QAAQ,IAAI;AAAA,cAClB,KAAK,QAAQ,kBAAmB,IAAI,SAAS,QAAQ,IAAK,KAAK,WAAW,IAAI,EAAE;AAAA,YACjF;AAAA,YACA,QAAQ,CAAC;AAAA,YACT,KAAK;AAAA,UACN;AAEA,gBAAM,KAAK,wBAAwB,QAAQ,OAAO;AAAA,QACnD;AAAA,MACD;AAAA,IAED;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAIQ,SAAS,UAA4B;AAC5C,QAAI;AAGH,WAAK,cAAc,KAAK,YAAY;AAEpC,WAAK,gBAAgB,EAAE,MAAM,MAAM;AAAA,MAAC,CAAC,EAAE,QAAQ,MAAM;AACpD,aAAK,OAAO,MAAM;AAAA,MACnB,CAAC;AAED,eAAS;AAAA,IACV,QAAQ;AACP,eAAS;AAAA,IACV;AAAA,EACD;AAAA,EAEA,MAAc,kBAAiC;AAC9C,UAAM,WAA4B,CAAC;AACnC,SAAK,QAAQ,QAAQ,CAAC,QAAgB;AACrC,UAAI,KAAK;AACT,UAAI,QAAQ,QAAQ,CAAC,QAAsB;AAC1C,YAAI,CAAC,IAAI,UAAW;AACpB,aAAK,IAAI,MAAM,oBAAoB,IAAI,IAAI,IAAI,IAAI,UAAU,EAAE;AAC/D,cAAM,UAAU,KAAK,OAAO;AAAA,UAC3B,EAAC,SAAS,IAAI,GAAE;AAAA,UAChB,EAAC,MAAM,IAAI,MAAM,UAAU,IAAI,SAAQ;AAAA,UACvC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD,EAAE,MAAM,CAAC,MAAM;AACd,eAAK,IAAI,MAAM,0BAA0B,IAAI,IAAI,IAAI,IAAI,UAAU,KAAK,CAAC,EAAE;AAAA,QAC5E,CAAC;AACD,iBAAS,KAAK,OAAO;AAAA,MACtB,CAAC;AAAA,IACF,CAAC;AACD,UAAM,QAAQ,WAAW,QAAQ;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AACjF,QAAI,OAAO;AACV,UAAI,MAAM,IAAK;AACf,YAAM,QAAQ;AACd,YAAM,UAAU,CAAC,GAAG,GAAG,SAAS,KAAK,CAAC,EAAE,CAAC;AACzC,WAAK,IAAI,MAAM,KAAK,UAAU,OAAO,CAAC;AAEtC,YAAM,MAAM,KAAK,QAAQ,KAAK,CAACD,SAAgBA,KAAI,QAAQ,QAAQ,CAAC,CAAC;AACrE,UAAI;AACJ,UAAI,OAAO,QAAW;AACrB,cAAM,IAAI,QAAQ,KAAK,CAACC,SAAsBA,KAAI,cAAc,QAAQ,CAAC,CAAC;AAAA,MAC3E;AAEA,UAAI,OAAO,UAAa,OAAO,QAAW;AACzC,aAAK,IAAI,MAAM,SAAS,EAAE,sBAAsB;AAChD;AAAA,MACD;AAEA,WAAK,WAAW,KAAK,KAAK,QAAQ,CAAC,GAAG,MAAM,GAAG;AAAA,IAEhD;AAAA,EACD;AAAA,EAEQ,gBAAgB,WAAmB,OAAiB;AAC3D,YAAO,WAAW;AAAA,MACjB,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AACJ,eAAO,CAAC,EAAC,OAAc,UAAU,EAAC,CAAC;AAAA,MAEpC;AACC,aAAK,IAAI,KAAK,sBAAsB,SAAS,EAAE;AAC/C,YAAI;AACH,iBAAO,KAAK,MAAM,KAAK;AAAA,QACxB,QAAO;AACN,iBAAO,CAAC;AAAA,QACT;AAAA,IAEF;AAAA,EACD;AAAA,EAEQ,WAAW,KAAa,KAAmB,MAAc,KAAgB;AAChF,SAAK,IAAI,MAAM,YAAY,IAAI,SAAS,KAAK,GAAG,QAAQ,IAAI,EAAE,MAAM,IAAI,IAAI,KAAK,IAAI,QAAQ,MAAM,KAAK,WAAW,IAAI,EAAE,EAAE,EAAE;AAG7H,QAAI,IAAI,aAAa,QAAW;AAC/B,WAAK,IAAI,MAAM,0CAA0C;AACzD;AAAA,IACD;AAEA,UAAM,YAAoB,QAAQ,kBAAkB,IAAI,YAAY,KAAK,WAAW,IAAI,EAAE;AAE1F,SAAK,OAAO,cAAc,EAAC,SAAS,IAAI,GAAE,GAAG,EAAC,MAAM,IAAI,MAAM,UAAU,IAAI,SAAQ,GAAG,KAAK,WAAW,IAAI,EAAE,IAAI;AAAA,MAChH,EAAC,MAAM,WAAW,OAAO,KAAK,gBAAgB,WAAW,GAAG,EAAC;AAAA,IAC9D,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM;AACnB,WAAK,IAAI,MAAM,kBAAkB,IAAI,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,KAAK,CAAC,EAAE;AAAA,IAC1E,CAAC,EAAE,QAAQ,MAAM;AAChB,WAAK,WAAW,MAAM;AACrB,aAAK,aAAa,KAAK,KAAK,IAAI;AAAA,MACjC,GAAG,GAAG;AAAA,IACP,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,cAAuC;AACpD,WAAO,MAAM,IAAI,QAAwB,CAAC,YAAY;AACrD,YAAM,YAA4B,CAAC;AACnC,YAAM,WAAW,CAAC,SAAoB;AACrC,YAAI,CAAC,KAAK,UAAU,CAAC,KAAK,QAAS;AACnC,YAAI,MAAoB,EAAC,IAAI,KAAK,OAAO,OAAO,SAAS,UAAU,KAAK,QAAQ,UAAU,MAAM,GAAE;AAClG,aAAK,OAAO;AAAA,UACX,EAAC,SAAS,KAAK,OAAO,OAAO,QAAO;AAAA,UACpC,EAAC,UAAU,KAAK,QAAQ,UAAU,MAAM,yBAAW,OAAM;AAAA,UACzD,iCAAmB;AAAA,QACpB,EAAE,KAAK,CAAC,MAAM;AACb,cAAI,OAAO,EAAE,OAAO,CAAC,EAAE;AACvB,oBAAU,KAAK,GAAG;AAAA,QACnB,CAAC,EAAE,MAAM,MAAM;AAAA,QACf,CAAC;AACD,kBAAU,KAAK;AAAA,MAChB;AACA,WAAK,OAAO,GAAG,OAAO,QAAQ;AAC9B,WAAK,OAAO,MAAM;AAClB,WAAK,WAAW,MAAM;AACrB,aAAK,OAAO,IAAI,OAAO,QAAQ;AAC/B,gBAAQ,SAAS;AAAA,MAClB,GAAG,GAAI;AAAA,IACR,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,wBAAwB,IAAkC;AACvE,WAAO,KAAK,sBAAsB,MAAM,KAAK,WAAW,EAAE,CAAC;AAAA,EAC5D;AAAA,EAEA,MAAc,sBAAsB,KAAyC;AAC5E,UAAM,OAAoB,CAAC;AAC3B,UAAM,OAAO,MAAM,KAAK,OAAO;AAAA,MAC9B,EAAC,SAAS,IAAI,GAAE;AAAA,MAChB,EAAC,UAAU,IAAI,UAAU,MAAM,yBAAW,OAAM;AAAA,MAChD,iCAAmB;AAAA,IACpB;AACA,UAAM,WAA4B,CAAC;AACnC,WAAO,MAAM,IAAI,QAAsB,CAAC,YAAY;AACnD,WAAK,OAAO,QAAQ,CAAC,MAAM;AAC1B,cAAM,MAAiB,EAAC,IAAI,EAAE,MAAM,UAAU,MAAM,EAAE,MAAM,MAAM,MAAM,IAAI,MAAM,GAAE;AACpF,aAAK,KAAK,GAAG;AACb,cAAM,IAAI,KAAK,OAAO;AAAA,UACrB,EAAC,SAAS,IAAI,GAAE;AAAA,UAChB,EAAC,UAAU,EAAE,MAAM,UAAU,MAAM,EAAE,MAAM,KAAI;AAAA,UAC/C,iCAAmB;AAAA,QACpB,EAAE,KAAK,CAACC,OAAM;AACb,cAAI,OAAOA,GAAE,OAAO,CAAC,EAAE;AAAA,QACxB,CAAC,EAAE,MAAM,MAAM;AAAA,QACf,CAAC;AACD,iBAAS,KAAK,CAAC;AACf,cAAM,KAAK,KAAK,OAAO;AAAA,UACtB,EAAC,SAAS,IAAI,GAAE;AAAA,UAChB,EAAC,UAAU,EAAE,MAAM,UAAU,MAAM,EAAE,MAAM,KAAI;AAAA,UAC/C,iCAAmB;AAAA,QACpB,EAAE,KAAK,CAACA,OAAM;AACb,cAAI,OAAOA,GAAE,OAAO,CAAC,EAAE;AAAA,QACxB,CAAC,EAAE,MAAM,MAAM;AAAA,QACf,CAAC;AACD,iBAAS,KAAK,EAAE;AAAA,MACjB,CAAC;AAED,cAAQ,WAAW,QAAQ,EAAE,KAAK,MAAM;AACvC,gBAAQ,IAAI;AAAA,MACb,CAAC;AAAA,IACF,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,WAAW,IAAmC;AAC3D,WAAO,MAAM,IAAI,QAAsB,CAAC,SAAS,WAAW;AAC3D,YAAM,WAAW,CAAC,SAAoB;AACrC,YAAI,CAAC,KAAK,UAAU,CAAC,KAAK,QAAS;AACnC,YAAI,MAAoB,EAAC,IAAI,KAAK,OAAO,OAAO,SAAS,UAAU,KAAK,QAAQ,UAAU,MAAM,GAAE;AAClG,aAAK,OAAO,IAAI,OAAO,QAAQ;AAC/B,aAAK,OAAO;AAAA,UACX,EAAC,SAAS,KAAK,OAAO,OAAO,QAAO;AAAA,UACpC,EAAC,UAAU,KAAK,QAAQ,UAAU,MAAM,yBAAW,OAAM;AAAA,UACzD,iCAAmB;AAAA,QACpB,EAAE,KAAK,CAAC,MAAM;AACb,cAAI,OAAO,EAAE,OAAO,CAAC,EAAE;AACvB,kBAAQ,GAAG;AAAA,QACZ,CAAC,EAAE,MAAM,CAAC,MAAM;AACf,iBAAO,CAAC;AAAA,QACT,CAAC;AAAA,MACF;AACA,WAAK,OAAO,GAAG,OAAO,QAAQ;AAC9B,WAAK,OAAO,MAAM,EAAC,SAAS,GAAE,CAAC;AAC/B,WAAK,WAAW,MAAM;AACrB,aAAK,OAAO,IAAI,OAAO,QAAQ;AAC/B,eAAO;AAAA,MACR,GAAG,GAAI;AAAA,IACR,CAAC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBD;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE5B,SAAO,UAAU,CAAC,YAAuD,IAAI,cAAc,OAAO;AACnG,OAAO;AAEN,GAAC,MAAM,IAAI,cAAc,GAAG;AAC7B;",
  "names": ["Bacnet", "dev", "obj", "v"]
}
