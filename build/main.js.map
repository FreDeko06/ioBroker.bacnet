{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport bacnet from 'bacstack';\n\ntype Device = {\n\tip: string;\n\tport: number;\n\tname: string;\n\tobjects: BACnetObject[];\n};\n\ntype BACnetObject = {\n\tobjectId: number;\n\tobjectName: string;\n\ttype: number;\n\tbinary?: boolean;\n\tunit?: string;\n};\ntype Property = {\n\tid: number;\n\ttype: ioBroker.CommonType;\n\tdefault: any;\n};\nclass Bacnet extends utils.Adapter {\n\n\tprivate bacnet: any;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'bacnet',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState('info.connection', false, true);\n\t\tthis.config.devices.forEach((dev: Device) => {\n\t\t\tdev.name = dev.name.replace(this.FORBIDDEN_CHARS, \"_\");\n\t\t\tdev.objects.forEach((obj: BACnetObject) => {\n\t\t\t\tobj.objectName = obj.objectName.replace(this.FORBIDDEN_CHARS, \"_\");\n\t\t\t});\n\t\t});\n\t\t\n\t\tawait this.updateStates();\n\n\t\tthis.log.debug(`binding to local port ${this.config.port}`);\n\t\tconst client = new bacnet({\n\t\t\tport: this.config.port,\n\t\t\tinterface: this.config.ip,\n\t\t\tadpuTimeout: 6000\n\t\t});\n\n\t\tthis.bacnet = client;\n\n\t\tclient.readProperty('192.168.2.200', {type: 8, instance: 10}, 76, (err: any, value: any) => {\n\n\t\t\tlet nums: any[] = [];\n\t\t\tvalue.values.forEach((val: any) => {\n\t\t\t\tnums.push({type: val.value.type, id: val.value.instance});\n\t\t\t});\n\n\t\t\tnums.forEach((n) => {\n\t\t\t\tclient.readProperty('192.168.2.200', {type: n.type, instance: n.id}, 28, (e: any, v: any) => {\n\t\t\t\t\tif (v == undefined) {\n\t\t\t\t\t\tthis.log.debug(n.id + \": null (\" + n.type + \")\");\n\t\t\t\t\t}else {\n\t\t\t\t\t\tthis.log.debug(n.id + \": \" + v.values[0].value + \" (\"  + n.type + \")\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t});\n\n\t\tclient.readProperty('192.168.2.200', {type: 0, instance: 305880}, this.PROPERTIES[\"present_value\"].id, (e: any, v: any) => {\n\n\t\t\tif (e != undefined) {\n\t\t\t\tthis.log.error(e);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.log.debug('Sollwert: ' + JSON.stringify(v));\n\t\t});\n\n\n\n\n\t}\n\n\n\tprivate async updateStates(): Promise<void> {\n\t\tawait this.deleteUnusedStates();\n\t\tawait this.createStates();\n\t}\n\n\tprivate async deleteUnusedStates(): Promise<void> {\n\t\tconst objects = await this.getAdapterObjectsAsync();\n\t\tfor(const s in objects) {\n\t\t\tif (!s.startsWith(`${this.name}.${this.instance}.dev`)) continue;\n\n\t\t\tif (objects[s].type == \"channel\" && this.getBACnetObjectFromId(s) == undefined) {\n\t\t\t\tawait this.delObjectAsync(s, {recursive: true});\n\t\t\t}\n\t\t\tif (objects[s].type == \"device\" && this.config.devices.find((dev: Device) => dev.name == s) == undefined) {\n\t\t\t\tawait this.delObjectAsync(s, {recursive: true});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getBACnetObjectFromId(id: string): BACnetObject {\n\t\treturn this.config.devices.find((dev: Device) => dev.objects.some((obj) => id == `dev.${dev.name}.${obj.objectName}`));\n\t}\n\n\n\tprivate PROPERTIES: {[id: string] : Property} = \n\t\t{\n\t\t\"present_value\": {id: 85, type: \"mixed\", default: 0},\n\t\t\"statusFlags\": {id: 111, type: \"number\", default: 0}\n\t};\n\n\tprivate async createStates(): Promise<void> {\n\t\tfor (let idx = 0; idx < this.config.devices.length; idx++) {\n\t\t\tconst dev: Device = this.config.devices[idx];\n\t\t\tthis.log.debug(`creating states for ${dev.name}...`);\n\t\t\tconst deviceObj: ioBroker.Object = {\n\t\t\t\ttype: \"device\",\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `${dev.name}`,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t\t_id: `dev.${dev.name}`,\n\t\t\t};\n\t\t\tawait this.setObjectNotExistsAsync(`dev.${dev.name}`, deviceObj);\n\n\t\t\tfor (let oIdx = 0; oIdx < dev.objects.length; oIdx++) {\n\t\t\t\tconst obj = dev.objects[oIdx];\n\n\t\t\t\tconst channelId = `dev.${dev.name}.${obj.objectName}`;\n\n\t\t\t\tconst channelObj: ioBroker.Object = {\n\t\t\t\t\ttype: \"channel\",\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: `Object ${obj.objectName}`,\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t\t_id: channelId\n\t\t\t\t};\n\t\t\t\tawait this.setObjectNotExistsAsync(channelId, channelObj);\n\n\n\t\t\t\tfor (const prop in this.PROPERTIES) {\n\t\t\t\t\tconst propId = `dev.${dev.name}.${obj.objectName}.${prop}`;\n\n\t\t\t\t\tconst propObj: ioBroker.StateObject = {\n\t\t\t\t\t\ttype: \"state\",\n\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\ttype: prop == \"present_value\" ? (obj.binary ? \"boolean\" : \"number\") : this.PROPERTIES[prop].type,\n\t\t\t\t\t\t\tread: true,\n\t\t\t\t\t\t\twrite: true,\n\t\t\t\t\t\t\trole: 'value',\n\t\t\t\t\t\t\tname: `Prop ${prop}`,\n\t\t\t\t\t\t\tdef: prop == \"present_value\" ? (obj.binary ? false : 0) : this.PROPERTIES[prop].default,\n\t\t\t\t\t\t\tunit: obj.unit,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t_id: propId,\n\t\t\t\t\t};\n\n\t\t\t\t\tawait this.setObjectNotExistsAsync(propId, propObj);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\t\t\tbacnet.close();\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Bacnet(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Bacnet())();\n}\n"],
  "mappings": "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",
  "names": ["bacnet"]
}
